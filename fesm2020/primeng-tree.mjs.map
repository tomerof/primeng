{"version":3,"file":"primeng-tree.mjs","sources":["../../src/app/components/tree/tree.ts","../../src/app/components/tree/primeng-tree.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport {\r\n    AfterContentInit,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ContentChildren,\r\n    ElementRef,\r\n    EventEmitter,\r\n    forwardRef,\r\n    Inject,\r\n    Input,\r\n    NgModule,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    Optional,\r\n    Output,\r\n    QueryList,\r\n    SimpleChanges,\r\n    TemplateRef,\r\n    ViewChild,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport { BlockableUI, PrimeNGConfig, PrimeTemplate, SharedModule, TranslationKeys, TreeDragDropService, TreeNode } from 'primeng/api';\r\nimport { DomHandler } from 'primeng/dom';\r\nimport { RippleModule } from 'primeng/ripple';\r\nimport { Scroller, ScrollerModule, ScrollerOptions } from 'primeng/scroller';\r\nimport { ObjectUtils } from 'primeng/utils';\r\nimport { Subscription } from 'rxjs';\r\nimport { CheckIcon } from 'primeng/icons/check';\r\nimport { ChevronDownIcon } from 'primeng/icons/chevrondown';\r\nimport { ChevronRightIcon } from 'primeng/icons/chevronright';\r\nimport { MinusIcon } from 'primeng/icons/minus';\r\nimport { SearchIcon } from 'primeng/icons/search';\r\nimport { SpinnerIcon } from 'primeng/icons/spinner';\r\n\r\n@Component({\r\n    selector: 'p-treeNode',\r\n    template: `\r\n        <ng-template [ngIf]=\"node\">\r\n            <li\r\n                *ngIf=\"tree.droppableNodes\"\r\n                class=\"p-treenode-droppoint\"\r\n                [ngClass]=\"{ 'p-treenode-droppoint-active': draghoverPrev }\"\r\n                (drop)=\"onDropPoint($event, -1)\"\r\n                (dragover)=\"onDropPointDragOver($event)\"\r\n                (dragenter)=\"onDropPointDragEnter($event, -1)\"\r\n                (dragleave)=\"onDropPointDragLeave($event)\"\r\n            ></li>\r\n            <li *ngIf=\"!tree.horizontal\" [ngClass]=\"['p-treenode', node.styleClass || '', isLeaf() ? 'p-treenode-leaf' : '']\" [ngStyle]=\"{ height: itemSize + 'px' }\" [style]=\"node.style\">\r\n                <div\r\n                    class=\"p-treenode-content\"\r\n                    [style.paddingLeft]=\"level * indentation + 'rem'\"\r\n                    (click)=\"onNodeClick($event)\"\r\n                    (contextmenu)=\"onNodeRightClick($event)\"\r\n                    (touchend)=\"onNodeTouchEnd()\"\r\n                    (drop)=\"onDropNode($event)\"\r\n                    (dragover)=\"onDropNodeDragOver($event)\"\r\n                    (dragenter)=\"onDropNodeDragEnter($event)\"\r\n                    (dragleave)=\"onDropNodeDragLeave($event)\"\r\n                    [draggable]=\"tree.draggableNodes\"\r\n                    (dragstart)=\"onDragStart($event)\"\r\n                    (dragend)=\"onDragStop($event)\"\r\n                    [attr.tabindex]=\"0\"\r\n                    [ngClass]=\"{ 'p-treenode-selectable': tree.selectionMode && node.selectable !== false, 'p-treenode-dragover': draghoverNode, 'p-highlight': isSelected() }\"\r\n                    role=\"treeitem\"\r\n                    (keydown)=\"onKeyDown($event)\"\r\n                    [attr.aria-posinset]=\"this.index + 1\"\r\n                    [attr.aria-expanded]=\"this.node.expanded\"\r\n                    [attr.aria-selected]=\"isSelected()\"\r\n                    [attr.aria-label]=\"node.label\"\r\n                    [attr.data-id]=\"node.key\"\r\n                >\r\n                    <button type=\"button\" [attr.aria-label]=\"tree.togglerAriaLabel\" class=\"p-tree-toggler p-link\" (click)=\"toggle($event)\" pRipple tabindex=\"-1\">\r\n                        <ng-container *ngIf=\"!tree.togglerIconTemplate\">\r\n                            <ChevronRightIcon *ngIf=\"!node.expanded\" [styleClass]=\"'p-tree-toggler-icon'\"/>\r\n                            <ChevronDownIcon *ngIf=\"node.expanded\" [styleClass]=\"'p-tree-toggler-icon'\"/>\r\n                        </ng-container>\r\n                        <span *ngIf=\"tree.togglerIconTemplate\" class=\"p-tree-toggler-icon\">\r\n                            <ng-template *ngTemplateOutlet=\"tree.togglerIconTemplate; context: { $implicit: node.expanded }\"></ng-template>\r\n                        </span>\r\n                    </button>\r\n                    <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-disabled': node.selectable === false }\" *ngIf=\"tree.selectionMode == 'checkbox'\" [attr.aria-checked]=\"isSelected()\">\r\n                        <div class=\"p-checkbox-box\" [ngClass]=\"{ 'p-highlight': isSelected(), 'p-indeterminate': node.partialSelected }\">\r\n                            <ng-container *ngIf=\"!tree.checkboxIconTemplate\">\r\n                                <CheckIcon *ngIf=\"isSelected()\" [styleClass]=\"'p-checkbox-icon'\"/>\r\n                                <MinusIcon *ngIf=\"node.partialSelected\" [styleClass]=\"'p-checkbox-icon'\"/>\r\n                            </ng-container>\r\n                            <ng-template *ngTemplateOutlet=\"tree.checkboxIconTemplate; context: { $implicit: isSelected, partialSelected: node.partialSelected }\"></ng-template>\r\n                        </div>\r\n                    </div>\r\n                    <span [class]=\"getIcon()\" *ngIf=\"node.icon || node.expandedIcon || node.collapsedIcon\"></span>\r\n                    <span class=\"p-treenode-label\">\r\n                        <span *ngIf=\"!tree.getTemplateForNode(node)\">{{ node.label }}</span>\r\n                        <span *ngIf=\"tree.getTemplateForNode(node)\">\r\n                            <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: { $implicit: node }\"></ng-container>\r\n                        </span>\r\n                    </span>\r\n                </div>\r\n                <ul class=\"p-treenode-children\" style=\"display: none;\" *ngIf=\"!tree.virtualScroll && node.children && node.expanded\" [style.display]=\"node.expanded ? 'block' : 'none'\" role=\"group\">\r\n                    <p-treeNode\r\n                        *ngFor=\"let childNode of node.children; let firstChild = first; let lastChild = last; let index = index; trackBy: tree.trackBy\"\r\n                        [node]=\"childNode\"\r\n                        [parentNode]=\"node\"\r\n                        [firstChild]=\"firstChild\"\r\n                        [lastChild]=\"lastChild\"\r\n                        [index]=\"index\"\r\n                        [itemSize]=\"itemSize\"\r\n                        [level]=\"level + 1\"\r\n                    ></p-treeNode>\r\n                </ul>\r\n            </li>\r\n            <li\r\n                *ngIf=\"tree.droppableNodes && lastChild\"\r\n                class=\"p-treenode-droppoint\"\r\n                [ngClass]=\"{ 'p-treenode-droppoint-active': draghoverNext }\"\r\n                (drop)=\"onDropPoint($event, 1)\"\r\n                (dragover)=\"onDropPointDragOver($event)\"\r\n                (dragenter)=\"onDropPointDragEnter($event, 1)\"\r\n                (dragleave)=\"onDropPointDragLeave($event)\"\r\n            ></li>\r\n            <table *ngIf=\"tree.horizontal\" [class]=\"node.styleClass\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td class=\"p-treenode-connector\" *ngIf=\"!root\">\r\n                            <table class=\"p-treenode-connector-table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td [ngClass]=\"{ 'p-treenode-connector-line': !firstChild }\"></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td [ngClass]=\"{ 'p-treenode-connector-line': !lastChild }\"></td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </td>\r\n                        <td class=\"p-treenode\" [ngClass]=\"{ 'p-treenode-collapsed': !node.expanded }\">\r\n                            <div\r\n                                class=\"p-treenode-content\"\r\n                                tabindex=\"0\"\r\n                                [ngClass]=\"{ 'p-treenode-selectable': tree.selectionMode, 'p-highlight': isSelected() }\"\r\n                                (click)=\"onNodeClick($event)\"\r\n                                (contextmenu)=\"onNodeRightClick($event)\"\r\n                                (touchend)=\"onNodeTouchEnd()\"\r\n                                (keydown)=\"onNodeKeydown($event)\"\r\n                            >\r\n                                <span *ngIf=\"!isLeaf()\" [ngClass]=\"'p-tree-toggler'\" (click)=\"toggle($event)\">\r\n                                    <ng-container *ngIf=\"!tree.togglerIconTemplate\">\r\n                                        <PlusIcon *ngIf=\"!node.expanded\" [styleClass]=\"'p-tree-toggler-icon'\" [ariaLabel]=\"tree.togglerAriaLabel\"/>\r\n                                        <MinusIcon *ngIf=\"node.expanded\" [styleClass]=\"'p-tree-toggler-icon'\" [ariaLabel]=\"tree.togglerAriaLabel\"/>\r\n                                    </ng-container>\r\n                                    <span *ngIf=\"tree.togglerIconTemplate\" class=\"p-tree-toggler-icon\">\r\n                                        <ng-template *ngTemplateOutlet=\"tree.togglerIconTemplate; context: { $implicit: node.expanded }\"></ng-template>\r\n                                    </span>\r\n                                </span>\r\n                                <span [class]=\"getIcon()\" *ngIf=\"node.icon || node.expandedIcon || node.collapsedIcon\"></span>\r\n                                <span class=\"p-treenode-label\">\r\n                                    <span *ngIf=\"!tree.getTemplateForNode(node)\">{{ node.label }}</span>\r\n                                    <span *ngIf=\"tree.getTemplateForNode(node)\">\r\n                                        <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: { $implicit: node }\"></ng-container>\r\n                                    </span>\r\n                                </span>\r\n                            </div>\r\n                        </td>\r\n                        <td class=\"p-treenode-children-container\" *ngIf=\"node.children && node.expanded\" [style.display]=\"node.expanded ? 'table-cell' : 'none'\">\r\n                            <div class=\"p-treenode-children\">\r\n                                <p-treeNode *ngFor=\"let childNode of node.children; let firstChild = first; let lastChild = last; trackBy: tree.trackBy\" [node]=\"childNode\" [firstChild]=\"firstChild\" [lastChild]=\"lastChild\"></p-treeNode>\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </ng-template>\r\n    `,\r\n    encapsulation: ViewEncapsulation.None,\r\n    host: {\r\n        class: 'p-element'\r\n    }\r\n})\r\nexport class UITreeNode implements OnInit {\r\n    static ICON_CLASS: string = 'p-treenode-icon ';\r\n\r\n    @Input() rowNode: any;\r\n\r\n    @Input() node: TreeNode;\r\n\r\n    @Input() parentNode: TreeNode;\r\n\r\n    @Input() root: boolean;\r\n\r\n    @Input() index: number;\r\n\r\n    @Input() firstChild: boolean;\r\n\r\n    @Input() lastChild: boolean;\r\n\r\n    @Input() level: number;\r\n\r\n    @Input() indentation: number;\r\n\r\n    @Input() itemSize: number;\r\n\r\n    tree: Tree;\r\n\r\n    timeout: any;\r\n\r\n    constructor(@Inject(forwardRef(() => Tree)) tree) {\r\n        this.tree = tree as Tree;\r\n    }\r\n\r\n    draghoverPrev: boolean;\r\n\r\n    draghoverNext: boolean;\r\n\r\n    draghoverNode: boolean;\r\n\r\n    ngOnInit() {\r\n        this.node.parent = this.parentNode;\r\n        if (this.parentNode) {\r\n            this.tree.syncNodeOption(this.node, this.tree.value, 'parent', this.tree.getNodeWithKey(this.parentNode.key, this.tree.value));\r\n        }\r\n    }\r\n\r\n    getIcon() {\r\n        let icon: string;\r\n\r\n        if (this.node.icon) icon = this.node.icon;\r\n        else icon = this.node.expanded && this.node.children && this.node.children.length ? this.node.expandedIcon : this.node.collapsedIcon;\r\n\r\n        return UITreeNode.ICON_CLASS + ' ' + icon;\r\n    }\r\n\r\n    isLeaf() {\r\n        return this.tree.isNodeLeaf(this.node);\r\n    }\r\n\r\n    toggle(event: Event) {\r\n        if (this.node.expanded) this.collapse(event);\r\n        else this.expand(event);\r\n\r\n        event.stopPropagation();\r\n    }\r\n\r\n    expand(event: Event) {\r\n        this.node.expanded = true;\r\n        if (this.tree.virtualScroll) {\r\n            this.tree.updateSerializedValue();\r\n            this.focusVirtualNode();\r\n        }\r\n        this.tree.onNodeExpand.emit({ originalEvent: event, node: this.node });\r\n    }\r\n\r\n    collapse(event: Event) {\r\n        this.node.expanded = false;\r\n        if (this.tree.virtualScroll) {\r\n            this.tree.updateSerializedValue();\r\n            this.focusVirtualNode();\r\n        }\r\n        this.tree.onNodeCollapse.emit({ originalEvent: event, node: this.node });\r\n    }\r\n\r\n    onNodeClick(event: MouseEvent) {\r\n        this.tree.onNodeClick(event, this.node);\r\n    }\r\n\r\n    onNodeKeydown(event: KeyboardEvent) {\r\n        if (event.which === 13) {\r\n            this.tree.onNodeClick(event, this.node);\r\n        }\r\n    }\r\n\r\n    onNodeTouchEnd() {\r\n        this.tree.onNodeTouchEnd();\r\n    }\r\n\r\n    onNodeRightClick(event: MouseEvent) {\r\n        this.tree.onNodeRightClick(event, this.node);\r\n    }\r\n\r\n    isSelected() {\r\n        return this.tree.isSelected(this.node);\r\n    }\r\n\r\n    onDropPoint(event: Event, position: number) {\r\n        event.preventDefault();\r\n        let dragNode = this.tree.dragNode;\r\n        let dragNodeIndex = this.tree.dragNodeIndex;\r\n        let dragNodeScope = this.tree.dragNodeScope;\r\n        let isValidDropPointIndex = this.tree.dragNodeTree === this.tree ? position === 1 || dragNodeIndex !== this.index - 1 : true;\r\n\r\n        if (this.tree.allowDrop(dragNode, this.node, dragNodeScope) && isValidDropPointIndex) {\r\n            let dropParams = { ...this.createDropPointEventMetadata(position) };\r\n\r\n            if (this.tree.validateDrop) {\r\n                this.tree.onNodeDrop.emit({\r\n                    originalEvent: event,\r\n                    dragNode: dragNode,\r\n                    dropNode: this.node,\r\n                    index: this.index,\r\n                    accept: () => {\r\n                        this.processPointDrop(dropParams);\r\n                    }\r\n                });\r\n            } else {\r\n                this.processPointDrop(dropParams);\r\n                this.tree.onNodeDrop.emit({\r\n                    originalEvent: event,\r\n                    dragNode: dragNode,\r\n                    dropNode: this.node,\r\n                    index: this.index\r\n                });\r\n            }\r\n        }\r\n\r\n        this.draghoverPrev = false;\r\n        this.draghoverNext = false;\r\n    }\r\n\r\n    processPointDrop(event) {\r\n        let newNodeList = event.dropNode.parent ? event.dropNode.parent.children : this.tree.value;\r\n        event.dragNodeSubNodes.splice(event.dragNodeIndex, 1);\r\n        let dropIndex = this.index;\r\n\r\n        if (event.position < 0) {\r\n            dropIndex = event.dragNodeSubNodes === newNodeList ? (event.dragNodeIndex > event.index ? event.index : event.index - 1) : event.index;\r\n            newNodeList.splice(dropIndex, 0, event.dragNode);\r\n        } else {\r\n            dropIndex = newNodeList.length;\r\n            newNodeList.push(event.dragNode);\r\n        }\r\n\r\n        this.tree.dragDropService.stopDrag({\r\n            node: event.dragNode,\r\n            subNodes: event.dropNode.parent ? event.dropNode.parent.children : this.tree.value,\r\n            index: event.dragNodeIndex\r\n        });\r\n    }\r\n\r\n    createDropPointEventMetadata(position) {\r\n        return {\r\n            dragNode: this.tree.dragNode,\r\n            dragNodeIndex: this.tree.dragNodeIndex,\r\n            dragNodeSubNodes: this.tree.dragNodeSubNodes,\r\n            dropNode: this.node,\r\n            index: this.index,\r\n            position: position\r\n        };\r\n    }\r\n\r\n    onDropPointDragOver(event) {\r\n        event.dataTransfer.dropEffect = 'move';\r\n        event.preventDefault();\r\n    }\r\n\r\n    onDropPointDragEnter(event: Event, position: number) {\r\n        if (this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\r\n            if (position < 0) this.draghoverPrev = true;\r\n            else this.draghoverNext = true;\r\n        }\r\n    }\r\n\r\n    onDropPointDragLeave(event: Event) {\r\n        this.draghoverPrev = false;\r\n        this.draghoverNext = false;\r\n    }\r\n\r\n    onDragStart(event) {\r\n        if (this.tree.draggableNodes && this.node.draggable !== false) {\r\n            event.dataTransfer.setData('text', 'data');\r\n\r\n            this.tree.dragDropService.startDrag({\r\n                tree: this,\r\n                node: this.node,\r\n                subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\r\n                index: this.index,\r\n                scope: this.tree.draggableScope\r\n            });\r\n        } else {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    onDragStop(event) {\r\n        this.tree.dragDropService.stopDrag({\r\n            node: this.node,\r\n            subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\r\n            index: this.index\r\n        });\r\n    }\r\n\r\n    onDropNodeDragOver(event) {\r\n        event.dataTransfer.dropEffect = 'move';\r\n        if (this.tree.droppableNodes) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    onDropNode(event) {\r\n        if (this.tree.droppableNodes && this.node.droppable !== false) {\r\n            let dragNode = this.tree.dragNode;\r\n\r\n            if (this.tree.allowDrop(dragNode, this.node, this.tree.dragNodeScope)) {\r\n                let dropParams = { ...this.createDropNodeEventMetadata() };\r\n\r\n                if (this.tree.validateDrop) {\r\n                    this.tree.onNodeDrop.emit({\r\n                        originalEvent: event,\r\n                        dragNode: dragNode,\r\n                        dropNode: this.node,\r\n                        index: this.index,\r\n                        accept: () => {\r\n                            this.processNodeDrop(dropParams);\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.processNodeDrop(dropParams);\r\n                    this.tree.onNodeDrop.emit({\r\n                        originalEvent: event,\r\n                        dragNode: dragNode,\r\n                        dropNode: this.node,\r\n                        index: this.index\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.draghoverNode = false;\r\n    }\r\n\r\n    createDropNodeEventMetadata() {\r\n        return {\r\n            dragNode: this.tree.dragNode,\r\n            dragNodeIndex: this.tree.dragNodeIndex,\r\n            dragNodeSubNodes: this.tree.dragNodeSubNodes,\r\n            dropNode: this.node\r\n        };\r\n    }\r\n\r\n    processNodeDrop(event) {\r\n        let dragNodeIndex = event.dragNodeIndex;\r\n        event.dragNodeSubNodes.splice(dragNodeIndex, 1);\r\n\r\n        if (event.dropNode.children) event.dropNode.children.push(event.dragNode);\r\n        else event.dropNode.children = [event.dragNode];\r\n\r\n        this.tree.dragDropService.stopDrag({\r\n            node: event.dragNode,\r\n            subNodes: event.dropNode.parent ? event.dropNode.parent.children : this.tree.value,\r\n            index: dragNodeIndex\r\n        });\r\n    }\r\n\r\n    onDropNodeDragEnter(event) {\r\n        if (this.tree.droppableNodes && this.node.droppable !== false && this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\r\n            this.draghoverNode = true;\r\n        }\r\n    }\r\n\r\n    onDropNodeDragLeave(event) {\r\n        if (this.tree.droppableNodes) {\r\n            let rect = event.currentTarget.getBoundingClientRect();\r\n            if (event.x > rect.left + rect.width || event.x < rect.left || event.y >= Math.floor(rect.top + rect.height) || event.y < rect.top) {\r\n                this.draghoverNode = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    onKeyDown(event: KeyboardEvent) {\r\n        const nodeElement = (<HTMLDivElement>event.target).parentElement.parentElement;\r\n\r\n        if (nodeElement.nodeName !== 'P-TREENODE' || (this.tree.contextMenu && this.tree.contextMenu.containerViewChild.nativeElement.style.display === 'block')) {\r\n            return;\r\n        }\r\n\r\n        switch (event.which) {\r\n            //down arrow\r\n            case 40:\r\n                const listElement = this.tree.droppableNodes ? nodeElement.children[1].children[1] : nodeElement.children[0].children[1];\r\n                if (listElement && listElement.children.length > 0) {\r\n                    this.focusNode(listElement.children[0]);\r\n                } else {\r\n                    const nextNodeElement = nodeElement.nextElementSibling;\r\n                    if (nextNodeElement) {\r\n                        this.focusNode(nextNodeElement);\r\n                    } else {\r\n                        let nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement);\r\n                        if (nextSiblingAncestor) {\r\n                            this.focusNode(nextSiblingAncestor);\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n\r\n            //up arrow\r\n            case 38:\r\n                if (nodeElement.previousElementSibling) {\r\n                    this.focusNode(this.findLastVisibleDescendant(nodeElement.previousElementSibling));\r\n                } else {\r\n                    let parentNodeElement = this.getParentNodeElement(nodeElement);\r\n                    if (parentNodeElement) {\r\n                        this.focusNode(parentNodeElement);\r\n                    }\r\n                }\r\n\r\n                event.preventDefault();\r\n                break;\r\n\r\n            //right arrow\r\n            case 39:\r\n                if (!this.node.expanded && !this.tree.isNodeLeaf(this.node)) {\r\n                    this.expand(event);\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n\r\n            //left arrow\r\n            case 37:\r\n                if (this.node.expanded) {\r\n                    this.collapse(event);\r\n                } else {\r\n                    let parentNodeElement = this.getParentNodeElement(nodeElement);\r\n                    if (parentNodeElement) {\r\n                        this.focusNode(parentNodeElement);\r\n                    }\r\n                }\r\n\r\n                event.preventDefault();\r\n                break;\r\n\r\n            //enter\r\n            case 13:\r\n                this.tree.onNodeClick(event, this.node);\r\n                event.preventDefault();\r\n                break;\r\n\r\n            default:\r\n                //no op\r\n                break;\r\n        }\r\n    }\r\n\r\n    findNextSiblingOfAncestor(nodeElement) {\r\n        let parentNodeElement = this.getParentNodeElement(nodeElement);\r\n        if (parentNodeElement) {\r\n            if (parentNodeElement.nextElementSibling) return parentNodeElement.nextElementSibling;\r\n            else return this.findNextSiblingOfAncestor(parentNodeElement);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    findLastVisibleDescendant(nodeElement) {\r\n        const listElement = <HTMLElement>Array.from(nodeElement.children).find((el) => DomHandler.hasClass(el, 'p-treenode'));\r\n        const childrenListElement = listElement.children[1];\r\n        if (childrenListElement && childrenListElement.children.length > 0) {\r\n            const lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];\r\n\r\n            return this.findLastVisibleDescendant(lastChildElement);\r\n        } else {\r\n            return nodeElement;\r\n        }\r\n    }\r\n\r\n    getParentNodeElement(nodeElement) {\r\n        const parentNodeElement = nodeElement.parentElement.parentElement.parentElement;\r\n\r\n        return parentNodeElement.tagName === 'P-TREENODE' ? parentNodeElement : null;\r\n    }\r\n\r\n    focusNode(element) {\r\n        if (this.tree.droppableNodes) element.children[1].children[0].focus();\r\n        else element.children[0].children[0].focus();\r\n    }\r\n\r\n    focusVirtualNode() {\r\n        this.timeout = setTimeout(() => {\r\n            let node = DomHandler.findSingle(document.body, `[data-id=\"${this.node.key ?? this.node.data}\"]`);\r\n            DomHandler.focus(node);\r\n        }, 1);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-tree',\r\n    template: `\r\n        <div\r\n            [ngClass]=\"{ 'p-tree p-component': true, 'p-tree-selectable': selectionMode, 'p-treenode-dragover': dragHover, 'p-tree-loading': loading, 'p-tree-flex-scrollable': scrollHeight === 'flex' }\"\r\n            [ngStyle]=\"style\"\r\n            [class]=\"styleClass\"\r\n            *ngIf=\"!horizontal\"\r\n            (drop)=\"onDrop($event)\"\r\n            (dragover)=\"onDragOver($event)\"\r\n            (dragenter)=\"onDragEnter()\"\r\n            (dragleave)=\"onDragLeave($event)\"\r\n        >\r\n            <div class=\"p-tree-loading-overlay p-component-overlay\" *ngIf=\"loading\">\r\n                <i *ngIf=\"loadingIcon\" [class]=\"'p-tree-loading-icon pi-spin ' + loadingIcon\"></i>\r\n                <ng-container *ngIf=\"!loadingIcon\">\r\n                    <SpinnerIcon *ngIf=\"!loadingIconTemplate\" [spin]=\"true\" [styleClass]=\"'p-tree-loading-icon'\"/>\r\n                    <span *ngIf=\"loadingIconTemplate\" class=\"p-tree-loading-icon\">\r\n                        <ng-template *ngTemplateOutlet=\"loadingIconTemplate\"></ng-template>\r\n                    </span>\r\n                </ng-container>\r\n            </div>\r\n            <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\r\n            <div *ngIf=\"filter\" class=\"p-tree-filter-container\">\r\n                <input #filter type=\"text\" autocomplete=\"off\" class=\"p-tree-filter p-inputtext p-component\" [attr.placeholder]=\"filterPlaceholder\" (keydown.enter)=\"$event.preventDefault()\" (input)=\"_filter($event.target.value)\" />\r\n                <SearchIcon *ngIf=\"!filterIconTemplate\" [styleClass]=\"'p-tree-filter-icon'\"/>\r\n                <span *ngIf=\"filterIconTemplate\" class=\"p-tree-filter-icon\">\r\n                    <ng-template *ngTemplateOutlet=\"filterIconTemplate\"></ng-template>\r\n                </span>\r\n            </div>\r\n\r\n            <p-scroller\r\n                #scroller\r\n                *ngIf=\"virtualScroll\"\r\n                [items]=\"serializedValue\"\r\n                [tabindex]=\"-1\"\r\n                styleClass=\"p-tree-wrapper\"\r\n                [style]=\"{ height: scrollHeight !== 'flex' ? scrollHeight : undefined }\"\r\n                [scrollHeight]=\"scrollHeight !== 'flex' ? undefined : '100%'\"\r\n                [itemSize]=\"virtualScrollItemSize || _virtualNodeHeight\"\r\n                [lazy]=\"lazy\"\r\n                (onScroll)=\"onScroll.emit($event)\"\r\n                (onScrollIndexChange)=\"onScrollIndexChange.emit($event)\"\r\n                (onLazyLoad)=\"onLazyLoad.emit($event)\"\r\n                [options]=\"virtualScrollOptions\"\r\n            >\r\n                <ng-template pTemplate=\"content\" let-items let-scrollerOptions=\"options\">\r\n                    <ul *ngIf=\"items\" class=\"p-tree-container\" [ngClass]=\"scrollerOptions.contentStyleClass\" [style]=\"scrollerOptions.contentStyle\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\r\n                        <p-treeNode\r\n                            #treeNode\r\n                            *ngFor=\"let rowNode of items; let firstChild = first; let lastChild = last; let index = index; trackBy: trackBy\"\r\n                            [level]=\"rowNode.level\"\r\n                            [rowNode]=\"rowNode\"\r\n                            [node]=\"rowNode.node\"\r\n                            [firstChild]=\"firstChild\"\r\n                            [lastChild]=\"lastChild\"\r\n                            [index]=\"getIndex(scrollerOptions, index)\"\r\n                            [itemSize]=\"scrollerOptions.itemSize\"\r\n                            [indentation]=\"indentation\"\r\n                        ></p-treeNode>\r\n                    </ul>\r\n                </ng-template>\r\n                <ng-container *ngIf=\"loaderTemplate\">\r\n                    <ng-template pTemplate=\"loader\" let-scrollerOptions=\"options\">\r\n                        <ng-container *ngTemplateOutlet=\"loaderTemplate; context: { options: scrollerOptions }\"></ng-container>\r\n                    </ng-template>\r\n                </ng-container>\r\n            </p-scroller>\r\n            <ng-container *ngIf=\"!virtualScroll\">\r\n                <div #wrapper class=\"p-tree-wrapper\" [style.max-height]=\"scrollHeight\">\r\n                    <ul class=\"p-tree-container\" *ngIf=\"getRootNode()\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\r\n                        <p-treeNode\r\n                            *ngFor=\"let node of getRootNode(); let firstChild = first; let lastChild = last; let index = index; trackBy: trackBy\"\r\n                            [node]=\"node\"\r\n                            [firstChild]=\"firstChild\"\r\n                            [lastChild]=\"lastChild\"\r\n                            [index]=\"index\"\r\n                            [level]=\"0\"\r\n                        ></p-treeNode>\r\n                    </ul>\r\n                </div>\r\n            </ng-container>\r\n\r\n            <div class=\"p-tree-empty-message\" *ngIf=\"!loading && (getRootNode() == null || getRootNode().length === 0)\">\r\n                <ng-container *ngIf=\"!emptyMessageTemplate; else emptyFilter\">\r\n                    {{ emptyMessageLabel }}\r\n                </ng-container>\r\n                <ng-container #emptyFilter *ngTemplateOutlet=\"emptyMessageTemplate\"></ng-container>\r\n            </div>\r\n            <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\r\n        </div>\r\n        <div [ngClass]=\"{ 'p-tree p-tree-horizontal p-component': true, 'p-tree-selectable': selectionMode }\" [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"horizontal\">\r\n            <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\r\n            <div class=\"p-tree-loading-mask p-component-overlay\" *ngIf=\"loading\">\r\n                <i *ngIf=\"loadingIcon\" [class]=\"'p-tree-loading-icon pi-spin ' + loadingIcon\"></i>\r\n                <ng-container *ngIf=\"!loadingIcon\">\r\n                <SpinnerIcon *ngIf=\"!loadingIconTemplate\" [spin]=\"true\" [styleClass]=\"'p-tree-loading-icon'\"/>\r\n                <span *ngIf=\"loadingIconTemplate\" class=\"p-tree-loading-icon\">\r\n                    <ng-template *ngTemplateOutlet=\"loadingIconTemplate\"></ng-template>\r\n                </span>\r\n            </ng-container>\r\n            </div>\r\n            <table *ngIf=\"value && value[0]\">\r\n                <p-treeNode [node]=\"value[0]\" [root]=\"true\"></p-treeNode>\r\n            </table>\r\n            <div class=\"p-tree-empty-message\" *ngIf=\"!loading && (getRootNode() == null || getRootNode().length === 0)\">\r\n                <ng-container *ngIf=\"!emptyMessageTemplate; else emptyFilter\">\r\n                    {{ emptyMessageLabel }}\r\n                </ng-container>\r\n                <ng-container #emptyFilter *ngTemplateOutlet=\"emptyMessageTemplate\"></ng-container>\r\n            </div>\r\n            <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\r\n        </div>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n    encapsulation: ViewEncapsulation.None,\r\n    styleUrls: ['./tree.css'],\r\n    host: {\r\n        class: 'p-element'\r\n    }\r\n})\r\nexport class Tree implements OnInit, AfterContentInit, OnChanges, OnDestroy, BlockableUI {\r\n    @Input() value: TreeNode[];\r\n\r\n    @Input() selectionMode: string;\r\n\r\n    @Input() selection: any;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() contextMenu: any;\r\n\r\n    @Input() layout: string = 'vertical';\r\n\r\n    @Input() draggableScope: any;\r\n\r\n    @Input() droppableScope: any;\r\n\r\n    @Input() draggableNodes: boolean;\r\n\r\n    @Input() droppableNodes: boolean;\r\n\r\n    @Input() metaKeySelection: boolean = true;\r\n\r\n    @Input() propagateSelectionUp: boolean = true;\r\n\r\n    @Input() propagateSelectionDown: boolean = true;\r\n\r\n    @Input() loading: boolean;\r\n\r\n    @Input() loadingIcon: string;\r\n\r\n    @Input() emptyMessage: string = '';\r\n\r\n    @Input() ariaLabel: string;\r\n\r\n    @Input() togglerAriaLabel: string;\r\n\r\n    @Input() ariaLabelledBy: string;\r\n\r\n    @Input() validateDrop: boolean;\r\n\r\n    @Input() filter: boolean;\r\n\r\n    @Input() filterBy: string = 'label';\r\n\r\n    @Input() filterMode: string = 'lenient';\r\n\r\n    @Input() filterPlaceholder: string;\r\n\r\n    @Input() filteredNodes: TreeNode[];\r\n\r\n    @Input() filterLocale: string;\r\n\r\n    @Input() scrollHeight: string;\r\n\r\n    @Input() lazy: boolean = false;\r\n\r\n    @Input() virtualScroll: boolean;\r\n\r\n    @Input() virtualScrollItemSize: number;\r\n\r\n    @Input() virtualScrollOptions: ScrollerOptions;\r\n\r\n    @Input() indentation: number = 1.5;\r\n\r\n    @Input() _templateMap: any;\r\n\r\n    @Input() trackBy: Function = (index: number, item: any) => item;\r\n\r\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeContextMenuSelect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeDrop: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onScroll: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onScrollIndexChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n\r\n    @ViewChild('filter') filterViewChild: ElementRef;\r\n\r\n    @ViewChild('scroller') scroller: Scroller;\r\n\r\n    @ViewChild('wrapper') wrapperViewChild: ElementRef;\r\n\r\n    /* @deprecated */\r\n    _virtualNodeHeight: number;\r\n    @Input() get virtualNodeHeight(): number {\r\n        return this._virtualNodeHeight;\r\n    }\r\n    set virtualNodeHeight(val: number) {\r\n        this._virtualNodeHeight = val;\r\n        console.warn('The virtualNodeHeight property is deprecated, use virtualScrollItemSize property instead.');\r\n    }\r\n\r\n    serializedValue: any[];\r\n\r\n    headerTemplate: TemplateRef<any>;\r\n\r\n    footerTemplate: TemplateRef<any>;\r\n\r\n    loaderTemplate: TemplateRef<any>;\r\n\r\n    emptyMessageTemplate: TemplateRef<any>;\r\n\r\n    togglerIconTemplate: TemplateRef<any>;\r\n\r\n    checkboxIconTemplate: TemplateRef<any>;\r\n\r\n    loadingIconTemplate: TemplateRef<any>;\r\n\r\n    filterIconTemplate: TemplateRef<any>;\r\n\r\n    public nodeTouched: boolean;\r\n\r\n    public dragNodeTree: Tree;\r\n\r\n    public dragNode: TreeNode;\r\n\r\n    public dragNodeSubNodes: TreeNode[];\r\n\r\n    public dragNodeIndex: number;\r\n\r\n    public dragNodeScope: any;\r\n\r\n    public dragHover: boolean;\r\n\r\n    public dragStartSubscription: Subscription;\r\n\r\n    public dragStopSubscription: Subscription;\r\n\r\n    constructor(public el: ElementRef, @Optional() public dragDropService: TreeDragDropService, public config: PrimeNGConfig, private cd: ChangeDetectorRef) {}\r\n\r\n    ngOnInit() {\r\n        if (this.droppableNodes) {\r\n            this.dragStartSubscription = this.dragDropService.dragStart$.subscribe((event) => {\r\n                this.dragNodeTree = event.tree;\r\n                this.dragNode = event.node;\r\n                this.dragNodeSubNodes = event.subNodes;\r\n                this.dragNodeIndex = event.index;\r\n                this.dragNodeScope = event.scope;\r\n            });\r\n\r\n            this.dragStopSubscription = this.dragDropService.dragStop$.subscribe((event) => {\r\n                this.dragNodeTree = null;\r\n                this.dragNode = null;\r\n                this.dragNodeSubNodes = null;\r\n                this.dragNodeIndex = null;\r\n                this.dragNodeScope = null;\r\n                this.dragHover = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnChanges(simpleChange: SimpleChanges) {\r\n        if (simpleChange.value) {\r\n            this.updateSerializedValue();\r\n        }\r\n    }\r\n\r\n    get horizontal(): boolean {\r\n        return this.layout == 'horizontal';\r\n    }\r\n\r\n    get emptyMessageLabel(): string {\r\n        return this.emptyMessage || this.config.getTranslation(TranslationKeys.EMPTY_MESSAGE);\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        if (this.templates.length) {\r\n            this._templateMap = {};\r\n        }\r\n\r\n        this.templates.forEach((item) => {\r\n            switch (item.getType()) {\r\n                case 'header':\r\n                    this.headerTemplate = item.template;\r\n                    break;\r\n\r\n                case 'empty':\r\n                    this.emptyMessageTemplate = item.template;\r\n                    break;\r\n\r\n                case 'footer':\r\n                    this.footerTemplate = item.template;\r\n                    break;\r\n\r\n                case 'loader':\r\n                    this.loaderTemplate = item.template;\r\n                    break;\r\n\r\n                case 'togglericon':\r\n                    this.togglerIconTemplate = item.template;\r\n                    break;\r\n\r\n                case 'checkboxicon':\r\n                    this.checkboxIconTemplate = item.template;\r\n                    break;\r\n\r\n                case 'loadingicon':\r\n                    this.loadingIconTemplate = item.template;\r\n                    break;\r\n\r\n                case 'filtericon':\r\n                    this.filterIconTemplate = item.template;\r\n                    break;\r\n\r\n                default:\r\n                    this._templateMap[item.name] = item.template;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    updateSerializedValue() {\r\n        this.serializedValue = [];\r\n        this.serializeNodes(null, this.getRootNode(), 0, true);\r\n    }\r\n\r\n    serializeNodes(parent, nodes, level, visible) {\r\n        if (nodes && nodes.length) {\r\n            for (let node of nodes) {\r\n                node.parent = parent;\r\n                const rowNode = {\r\n                    node: node,\r\n                    parent: parent,\r\n                    level: level,\r\n                    visible: visible && (parent ? parent.expanded : true)\r\n                };\r\n                this.serializedValue.push(rowNode);\r\n\r\n                if (rowNode.visible && node.expanded) {\r\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onNodeClick(event, node: TreeNode) {\r\n        let eventTarget = <Element>event.target;\r\n        if (DomHandler.hasClass(eventTarget, 'p-tree-toggler') || DomHandler.hasClass(eventTarget, 'p-tree-toggler-icon')) {\r\n            return;\r\n        } else if (this.selectionMode) {\r\n            if (node.selectable === false) {\r\n                return;\r\n            }\r\n\r\n            if (this.hasFilteredNodes()) {\r\n                node = this.getNodeWithKey(node.key, this.value);\r\n\r\n                if (!node) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            let index = this.findIndexInSelection(node);\r\n            let selected = index >= 0;\r\n\r\n            if (this.isCheckboxSelectionMode()) {\r\n                if (selected) {\r\n                    if (this.propagateSelectionDown) this.propagateDown(node, false);\r\n                    else this.selection = this.selection.filter((val, i) => i != index);\r\n\r\n                    if (this.propagateSelectionUp && node.parent) {\r\n                        this.propagateUp(node.parent, false);\r\n                    }\r\n\r\n                    this.selectionChange.emit(this.selection);\r\n                    this.onNodeUnselect.emit({ originalEvent: event, node: node });\r\n                } else {\r\n                    if (this.propagateSelectionDown) this.propagateDown(node, true);\r\n                    else this.selection = [...(this.selection || []), node];\r\n\r\n                    if (this.propagateSelectionUp && node.parent) {\r\n                        this.propagateUp(node.parent, true);\r\n                    }\r\n\r\n                    this.selectionChange.emit(this.selection);\r\n                    this.onNodeSelect.emit({ originalEvent: event, node: node });\r\n                }\r\n            } else {\r\n                let metaSelection = this.nodeTouched ? false : this.metaKeySelection;\r\n\r\n                if (metaSelection) {\r\n                    let metaKey = event.metaKey || event.ctrlKey;\r\n\r\n                    if (selected && metaKey) {\r\n                        if (this.isSingleSelectionMode()) {\r\n                            this.selectionChange.emit(null);\r\n                        } else {\r\n                            this.selection = this.selection.filter((val, i) => i != index);\r\n                            this.selectionChange.emit(this.selection);\r\n                        }\r\n\r\n                        this.onNodeUnselect.emit({ originalEvent: event, node: node });\r\n                    } else {\r\n                        if (this.isSingleSelectionMode()) {\r\n                            this.selectionChange.emit(node);\r\n                        } else if (this.isMultipleSelectionMode()) {\r\n                            this.selection = !metaKey ? [] : this.selection || [];\r\n                            this.selection = [...this.selection, node];\r\n                            this.selectionChange.emit(this.selection);\r\n                        }\r\n\r\n                        this.onNodeSelect.emit({ originalEvent: event, node: node });\r\n                    }\r\n                } else {\r\n                    if (this.isSingleSelectionMode()) {\r\n                        if (selected) {\r\n                            this.selection = null;\r\n                            this.onNodeUnselect.emit({ originalEvent: event, node: node });\r\n                        } else {\r\n                            this.selection = node;\r\n                            this.onNodeSelect.emit({ originalEvent: event, node: node });\r\n                        }\r\n                    } else {\r\n                        if (selected) {\r\n                            this.selection = this.selection.filter((val, i) => i != index);\r\n                            this.onNodeUnselect.emit({ originalEvent: event, node: node });\r\n                        } else {\r\n                            this.selection = [...(this.selection || []), node];\r\n                            this.onNodeSelect.emit({ originalEvent: event, node: node });\r\n                        }\r\n                    }\r\n\r\n                    this.selectionChange.emit(this.selection);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.nodeTouched = false;\r\n    }\r\n\r\n    onNodeTouchEnd() {\r\n        this.nodeTouched = true;\r\n    }\r\n\r\n    onNodeRightClick(event: MouseEvent, node: TreeNode) {\r\n        if (this.contextMenu) {\r\n            let eventTarget = <Element>event.target;\r\n\r\n            if (eventTarget.className && eventTarget.className.indexOf('p-tree-toggler') === 0) {\r\n                return;\r\n            } else {\r\n                let index = this.findIndexInSelection(node);\r\n                let selected = index >= 0;\r\n\r\n                if (!selected) {\r\n                    if (this.isSingleSelectionMode()) this.selectionChange.emit(node);\r\n                    else this.selectionChange.emit([node]);\r\n                }\r\n\r\n                this.contextMenu.show(event);\r\n                this.onNodeContextMenuSelect.emit({ originalEvent: event, node: node });\r\n            }\r\n        }\r\n    }\r\n\r\n    findIndexInSelection(node: TreeNode) {\r\n        let index: number = -1;\r\n\r\n        if (this.selectionMode && this.selection) {\r\n            if (this.isSingleSelectionMode()) {\r\n                let areNodesEqual = (this.selection.key && this.selection.key === node.key) || this.selection == node;\r\n                index = areNodesEqual ? 0 : -1;\r\n            } else {\r\n                for (let i = 0; i < this.selection.length; i++) {\r\n                    let selectedNode = this.selection[i];\r\n                    let areNodesEqual = (selectedNode.key && selectedNode.key === node.key) || selectedNode == node;\r\n                    if (areNodesEqual) {\r\n                        index = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    syncNodeOption(node, parentNodes, option, value?: any) {\r\n        // to synchronize the node option between the filtered nodes and the original nodes(this.value)\r\n        const _node = this.hasFilteredNodes() ? this.getNodeWithKey(node.key, parentNodes) : null;\r\n        if (_node) {\r\n            _node[option] = value || node[option];\r\n        }\r\n    }\r\n\r\n    hasFilteredNodes() {\r\n        return this.filter && this.filteredNodes && this.filteredNodes.length;\r\n    }\r\n\r\n    getNodeWithKey(key: string, nodes: TreeNode[]) {\r\n        for (let node of nodes) {\r\n            if (node.key === key) {\r\n                return node;\r\n            }\r\n\r\n            if (node.children) {\r\n                let matchedNode = this.getNodeWithKey(key, node.children);\r\n                if (matchedNode) {\r\n                    return matchedNode;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    propagateUp(node: TreeNode, select: boolean) {\r\n        if (node.children && node.children.length) {\r\n            let selectedCount: number = 0;\r\n            let childPartialSelected: boolean = false;\r\n            for (let child of node.children) {\r\n                if (this.isSelected(child)) {\r\n                    selectedCount++;\r\n                } else if (child.partialSelected) {\r\n                    childPartialSelected = true;\r\n                }\r\n            }\r\n\r\n            if (select && selectedCount == node.children.length) {\r\n                this.selection = [...(this.selection || []), node];\r\n                node.partialSelected = false;\r\n            } else {\r\n                if (!select) {\r\n                    let index = this.findIndexInSelection(node);\r\n                    if (index >= 0) {\r\n                        this.selection = this.selection.filter((val, i) => i != index);\r\n                    }\r\n                }\r\n\r\n                if (childPartialSelected || (selectedCount > 0 && selectedCount != node.children.length)) node.partialSelected = true;\r\n                else node.partialSelected = false;\r\n            }\r\n\r\n            this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\r\n        }\r\n\r\n        let parent = node.parent;\r\n        if (parent) {\r\n            this.propagateUp(parent, select);\r\n        }\r\n    }\r\n\r\n    propagateDown(node: TreeNode, select: boolean) {\r\n        let index = this.findIndexInSelection(node);\r\n\r\n        if (select && index == -1) {\r\n            this.selection = [...(this.selection || []), node];\r\n        } else if (!select && index > -1) {\r\n            this.selection = this.selection.filter((val, i) => i != index);\r\n        }\r\n\r\n        node.partialSelected = false;\r\n\r\n        this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\r\n\r\n        if (node.children && node.children.length) {\r\n            for (let child of node.children) {\r\n                this.propagateDown(child, select);\r\n            }\r\n        }\r\n    }\r\n\r\n    isSelected(node: TreeNode) {\r\n        return this.findIndexInSelection(node) != -1;\r\n    }\r\n\r\n    isSingleSelectionMode() {\r\n        return this.selectionMode && this.selectionMode == 'single';\r\n    }\r\n\r\n    isMultipleSelectionMode() {\r\n        return this.selectionMode && this.selectionMode == 'multiple';\r\n    }\r\n\r\n    isCheckboxSelectionMode() {\r\n        return this.selectionMode && this.selectionMode == 'checkbox';\r\n    }\r\n\r\n    isNodeLeaf(node) {\r\n        return node.leaf == false ? false : !(node.children && node.children.length);\r\n    }\r\n\r\n    getRootNode() {\r\n        return this.filteredNodes ? this.filteredNodes : this.value;\r\n    }\r\n\r\n    getTemplateForNode(node: TreeNode): TemplateRef<any> {\r\n        if (this._templateMap) return node.type ? this._templateMap[node.type] : this._templateMap['default'];\r\n        else return null;\r\n    }\r\n\r\n    onDragOver(event) {\r\n        if (this.droppableNodes && (!this.value || this.value.length === 0)) {\r\n            event.dataTransfer.dropEffect = 'move';\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    onDrop(event) {\r\n        if (this.droppableNodes && (!this.value || this.value.length === 0)) {\r\n            event.preventDefault();\r\n            let dragNode = this.dragNode;\r\n\r\n            if (this.allowDrop(dragNode, null, this.dragNodeScope)) {\r\n                let dragNodeIndex = this.dragNodeIndex;\r\n                this.value = this.value || [];\r\n\r\n                if (this.validateDrop) {\r\n                    this.onNodeDrop.emit({\r\n                        originalEvent: event,\r\n                        dragNode: dragNode,\r\n                        dropNode: null,\r\n                        index: dragNodeIndex,\r\n                        accept: () => {\r\n                            this.processTreeDrop(dragNode, dragNodeIndex);\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.onNodeDrop.emit({\r\n                        originalEvent: event,\r\n                        dragNode: dragNode,\r\n                        dropNode: null,\r\n                        index: dragNodeIndex\r\n                    });\r\n\r\n                    this.processTreeDrop(dragNode, dragNodeIndex);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTreeDrop(dragNode, dragNodeIndex) {\r\n        this.dragNodeSubNodes.splice(dragNodeIndex, 1);\r\n        this.value.push(dragNode);\r\n        this.dragDropService.stopDrag({\r\n            node: dragNode\r\n        });\r\n    }\r\n\r\n    onDragEnter() {\r\n        if (this.droppableNodes && this.allowDrop(this.dragNode, null, this.dragNodeScope)) {\r\n            this.dragHover = true;\r\n        }\r\n    }\r\n\r\n    onDragLeave(event) {\r\n        if (this.droppableNodes) {\r\n            let rect = event.currentTarget.getBoundingClientRect();\r\n            if (event.x > rect.left + rect.width || event.x < rect.left || event.y > rect.top + rect.height || event.y < rect.top) {\r\n                this.dragHover = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    allowDrop(dragNode: TreeNode, dropNode: TreeNode, dragNodeScope: any): boolean {\r\n        if (!dragNode) {\r\n            //prevent random html elements to be dragged\r\n            return false;\r\n        } else if (this.isValidDragScope(dragNodeScope)) {\r\n            let allow: boolean = true;\r\n            if (dropNode) {\r\n                if (dragNode === dropNode) {\r\n                    allow = false;\r\n                } else {\r\n                    let parent = dropNode.parent;\r\n                    while (parent != null) {\r\n                        if (parent === dragNode) {\r\n                            allow = false;\r\n                            break;\r\n                        }\r\n                        parent = parent.parent;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return allow;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    isValidDragScope(dragScope: any): boolean {\r\n        let dropScope = this.droppableScope;\r\n\r\n        if (dropScope) {\r\n            if (typeof dropScope === 'string') {\r\n                if (typeof dragScope === 'string') return dropScope === dragScope;\r\n                else if (Array.isArray(dragScope)) return (<Array<any>>dragScope).indexOf(dropScope) != -1;\r\n            } else if (Array.isArray(dropScope)) {\r\n                if (typeof dragScope === 'string') {\r\n                    return (<Array<any>>dropScope).indexOf(dragScope) != -1;\r\n                } else if (Array.isArray(dragScope)) {\r\n                    for (let s of dropScope) {\r\n                        for (let ds of dragScope) {\r\n                            if (s === ds) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public _filter(value) {\r\n        let filterValue = value;\r\n        if (filterValue === '') {\r\n            this.filteredNodes = null;\r\n        } else {\r\n            this.filteredNodes = [];\r\n            const searchFields: string[] = this.filterBy.split(',');\r\n            const filterText = ObjectUtils.removeAccents(filterValue).toLocaleLowerCase(this.filterLocale);\r\n            const isStrictMode = this.filterMode === 'strict';\r\n            for (let node of this.value) {\r\n                let copyNode = { ...node };\r\n                let paramsWithoutNode = { searchFields, filterText, isStrictMode };\r\n                if (\r\n                    (isStrictMode && (this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\r\n                    (!isStrictMode && (this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))\r\n                ) {\r\n                    this.filteredNodes.push(copyNode);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.updateSerializedValue();\r\n        this.onFilter.emit({\r\n            filter: filterValue,\r\n            filteredValue: this.filteredNodes\r\n        });\r\n    }\r\n\r\n    public resetFilter() {\r\n        this.filteredNodes = null;\r\n\r\n        if (this.filterViewChild && this.filterViewChild.nativeElement) {\r\n            this.filterViewChild.nativeElement.value = '';\r\n        }\r\n    }\r\n\r\n    public scrollToVirtualIndex(index: number) {\r\n        this.virtualScroll && this.scroller.scrollToIndex(index);\r\n    }\r\n\r\n    public scrollTo(options) {\r\n        if (this.virtualScroll) {\r\n            this.scroller.scrollTo(options);\r\n        } else if (this.wrapperViewChild && this.wrapperViewChild.nativeElement) {\r\n            if (this.wrapperViewChild.nativeElement.scrollTo) {\r\n                this.wrapperViewChild.nativeElement.scrollTo(options);\r\n            } else {\r\n                this.wrapperViewChild.nativeElement.scrollLeft = options.left;\r\n                this.wrapperViewChild.nativeElement.scrollTop = options.top;\r\n            }\r\n        }\r\n    }\r\n\r\n    findFilteredNodes(node, paramsWithoutNode) {\r\n        if (node) {\r\n            let matched = false;\r\n            if (node.children) {\r\n                let childNodes = [...node.children];\r\n                node.children = [];\r\n                for (let childNode of childNodes) {\r\n                    let copyChildNode = { ...childNode };\r\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\r\n                        matched = true;\r\n                        node.children.push(copyChildNode);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (matched) {\r\n                node.expanded = true;\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    isFilterMatched(node, { searchFields, filterText, isStrictMode }) {\r\n        let matched = false;\r\n        for (let field of searchFields) {\r\n            let fieldValue = ObjectUtils.removeAccents(String(ObjectUtils.resolveFieldData(node, field))).toLocaleLowerCase(this.filterLocale);\r\n            if (fieldValue.indexOf(filterText) > -1) {\r\n                matched = true;\r\n            }\r\n        }\r\n\r\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\r\n            matched = this.findFilteredNodes(node, { searchFields, filterText, isStrictMode }) || matched;\r\n        }\r\n\r\n        return matched;\r\n    }\r\n\r\n    getIndex(options, index) {\r\n        const getItemOptions = options['getItemOptions'];\r\n        return getItemOptions ? getItemOptions(index).index : index;\r\n    }\r\n\r\n    getBlockableElement(): HTMLElement {\r\n        return this.el.nativeElement.children[0];\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.dragStartSubscription) {\r\n            this.dragStartSubscription.unsubscribe();\r\n        }\r\n\r\n        if (this.dragStopSubscription) {\r\n            this.dragStopSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n@NgModule({\r\n    imports: [CommonModule, SharedModule, RippleModule, ScrollerModule, CheckIcon, ChevronDownIcon, ChevronRightIcon, MinusIcon, SearchIcon, SpinnerIcon],\r\n    exports: [Tree, SharedModule, ScrollerModule],\r\n    declarations: [Tree, UITreeNode]\r\n})\r\nexport class TreeModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}