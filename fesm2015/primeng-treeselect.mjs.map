{"version":3,"file":"primeng-treeselect.mjs","sources":["../../src/app/components/treeselect/treeselect.ts","../../src/app/components/treeselect/primeng-treeselect.ts"],"sourcesContent":["import { AnimationEvent } from '@angular/animations';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AfterContentInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, Input, NgModule, Output, QueryList, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { OverlayOptions, OverlayService, PrimeNGConfig, PrimeTemplate, SharedModule, TreeNode } from 'primeng/api';\r\nimport { DomHandler } from 'primeng/dom';\r\nimport { ChevronDownIcon } from 'primeng/icons/chevrondown';\r\nimport { SearchIcon } from 'primeng/icons/search';\r\nimport { TimesIcon } from 'primeng/icons/times';\r\nimport { Overlay, OverlayModule } from 'primeng/overlay';\r\nimport { RippleModule } from 'primeng/ripple';\r\nimport { Tree, TreeModule } from 'primeng/tree';\r\nimport { ObjectUtils } from 'primeng/utils';\r\n\r\nexport const TREESELECT_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TreeSelect),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'p-treeSelect',\r\n    template: `\r\n        <div #container [ngClass]=\"containerClass()\" [class]=\"containerStyleClass\" [ngStyle]=\"containerStyle\" (click)=\"onClick($event)\">\r\n            <div class=\"p-hidden-accessible\">\r\n                <input\r\n                    #focusInput\r\n                    type=\"text\"\r\n                    role=\"listbox\"\r\n                    [attr.id]=\"inputId\"\r\n                    readonly\r\n                    [disabled]=\"disabled\"\r\n                    (focus)=\"onFocus()\"\r\n                    (blur)=\"onBlur()\"\r\n                    (keydown)=\"onKeyDown($event)\"\r\n                    [attr.tabindex]=\"tabindex\"\r\n                    aria-haspopup=\"true\"\r\n                    [attr.aria-expanded]=\"overlayVisible\"\r\n                    [attr.aria-labelledby]=\"ariaLabelledBy\"\r\n                />\r\n            </div>\r\n            <div class=\"p-treeselect-label-container\">\r\n                <div [ngClass]=\"labelClass()\" [class]=\"labelStyleClass\" [ngStyle]=\"labelStyle\">\r\n                    <ng-container *ngIf=\"valueTemplate; else defaultValueTemplate\">\r\n                        <ng-container *ngTemplateOutlet=\"valueTemplate; context: { $implicit: value, placeholder: placeholder }\"></ng-container>\r\n                    </ng-container>\r\n                    <ng-template #defaultValueTemplate>\r\n                        <ng-container *ngIf=\"display === 'comma'; else chipsValueTemplate\">\r\n                            {{ label || 'empty' }}\r\n                        </ng-container>\r\n                        <ng-template #chipsValueTemplate>\r\n                            <div *ngFor=\"let node of value\" class=\"p-treeselect-token\">\r\n                                <span class=\"p-treeselect-token-label\">{{ node.label }}</span>\r\n                            </div>\r\n                            <ng-container *ngIf=\"emptyValue\">{{ placeholder || 'empty' }}</ng-container>\r\n                        </ng-template>\r\n                    </ng-template>\r\n                </div>\r\n                <ng-container *ngIf=\"checkValue() && !disabled && showClear\">\r\n                    <TimesIcon *ngIf=\"!clearIconTemplate\" [styleClass]=\"'p-treeselect-clear-icon'\" (click)=\"clear($event)\"/>\r\n                    <span *ngIf=\"clearIconTemplate\" class=\"p-treeselect-clear-icon\" (click)=\"clear($event)\">\r\n                        <ng-template *ngTemplateOutlet=\"clearIconTemplate;\"></ng-template>\r\n                    </span>\r\n                </ng-container>\r\n            </div>\r\n            <div class=\"p-treeselect-trigger\">\r\n                <ChevronDownIcon *ngIf=\"!triggerIconTemplate\" [styleClass]=\"'p-treeselect-trigger-icon'\"/>\r\n                <span *ngIf=\"triggerIconTemplate\" class=\"p-treeselect-trigger-icon\">\r\n                    <ng-template *ngTemplateOutlet=\"triggerIconTemplate\"></ng-template>\r\n                </span>\r\n            </div>\r\n            <p-overlay\r\n                #overlay\r\n                [(visible)]=\"overlayVisible\"\r\n                [options]=\"overlayOptions\"\r\n                [target]=\"'@parent'\"\r\n                [appendTo]=\"appendTo\"\r\n                [showTransitionOptions]=\"showTransitionOptions\"\r\n                [hideTransitionOptions]=\"hideTransitionOptions\"\r\n                (onAnimationStart)=\"onOverlayAnimationStart($event)\"\r\n                (onShow)=\"onShow.emit($event)\"\r\n                (onHide)=\"hide($event)\"\r\n            >\r\n                <ng-template pTemplate=\"content\">\r\n                    <div #panel class=\"p-treeselect-panel p-component\" [ngStyle]=\"panelStyle\" [class]=\"panelStyleClass\" [ngClass]=\"panelClass\">\r\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: { $implicit: value, options: options }\"></ng-container>\r\n                        <div class=\"p-treeselect-header\" *ngIf=\"filter\">\r\n                            <div class=\"p-treeselect-filter-container\">\r\n                                <input\r\n                                    #filter\r\n                                    type=\"text\"\r\n                                    autocomplete=\"off\"\r\n                                    class=\"p-treeselect-filter p-inputtext p-component\"\r\n                                    [attr.placeholder]=\"filterPlaceholder\"\r\n                                    (keydown.enter)=\"$event.preventDefault()\"\r\n                                    (input)=\"onFilterInput($event)\"\r\n                                    [value]=\"filterValue\"\r\n                                />\r\n                                <SearchIcon *ngIf=\"!filterIconTemplate\" [styleClass]=\"'p-treeselect-filter-icon'\"/>\r\n                                <span *ngIf=\"filterIconTemplate\" class=\"p-treeselect-filter-icon\">\r\n                                    <ng-template *ngTemplateOutlet=\"filterIconTemplate\"></ng-template>\r\n                                </span>\r\n                            </div>\r\n                            <button class=\"p-treeselect-close p-link\" (click)=\"hide()\">\r\n                                <TimesIcon *ngIf=\"!closeIconTemplate\" [styleClass]=\"'p-treeselect-filter-icon'\"/>\r\n                                <span *ngIf=\"closeIconTemplate\" class=\"p-treeselect-filter-icon\">\r\n                                    <ng-template *ngTemplateOutlet=\"closeIconTemplate\"></ng-template>\r\n                                </span>\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"p-treeselect-items-wrapper\" [ngStyle]=\"{ 'max-height': scrollHeight }\">\r\n                            <p-tree\r\n                                #tree\r\n                                [value]=\"options\"\r\n                                [propagateSelectionDown]=\"propagateSelectionDown\"\r\n                                [propagateSelectionUp]=\"propagateSelectionUp\"\r\n                                [selectionMode]=\"selectionMode\"\r\n                                (selectionChange)=\"onSelectionChange($event)\"\r\n                                [selection]=\"value\"\r\n                                [metaKeySelection]=\"metaKeySelection\"\r\n                                (onNodeExpand)=\"nodeExpand($event)\"\r\n                                (onNodeCollapse)=\"nodeCollapse($event)\"\r\n                                (onNodeSelect)=\"onSelect($event)\"\r\n                                [emptyMessage]=\"emptyMessage\"\r\n                                (onNodeUnselect)=\"onUnselect($event)\"\r\n                                [filterBy]=\"filterBy\"\r\n                                [filterMode]=\"filterMode\"\r\n                                [filterPlaceholder]=\"filterPlaceholder\"\r\n                                [filterLocale]=\"filterLocale\"\r\n                                [filteredNodes]=\"filteredNodes\"\r\n                                [_templateMap]=\"templateMap\"\r\n                            >\r\n                                <ng-container *ngIf=\"emptyTemplate\">\r\n                                    <ng-template pTemplate=\"empty\">\r\n                                        <ng-container *ngTemplateOutlet=\"emptyTemplate\"></ng-container>\r\n                                    </ng-template>\r\n                                </ng-container>\r\n                                <ng-template pTemplate=\"togglericon\" let-expanded *ngIf=\"itemTogglerIconTemplate\">\r\n                                    <ng-container *ngTemplateOutlet=\"itemTogglerIconTemplate; context: { $implicit: expanded }\"></ng-container>\r\n                                </ng-template>\r\n                                <ng-template pTemplate=\"checkboxicon\" *ngIf=\"itemCheckboxIconTemplate\">\r\n                                    <ng-template *ngTemplateOutlet=\"itemCheckboxIconTemplate\"></ng-template>\r\n                                </ng-template>\r\n                                <ng-template pTemplate=\"loadingicon\" *ngIf=\"itemLoadingIconTemplate\">\r\n                                    <ng-container *ngTemplateOutlet=\"itemLoadingIconTemplate\"></ng-container>\r\n                                </ng-template>\r\n                            </p-tree>\r\n                        </div>\r\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context: { $implicit: value, options: options }\"></ng-container>\r\n                    </div>\r\n                </ng-template>\r\n            </p-overlay>\r\n        </div>\r\n    `,\r\n    styleUrls: ['./treeselect.css'],\r\n    host: {\r\n        class: 'p-element p-inputwrapper',\r\n        '[class.p-inputwrapper-filled]': '!emptyValue',\r\n        '[class.p-inputwrapper-focus]': 'focused || overlayVisible',\r\n        '[class.p-treeselect-clearable]': 'showClear && !disabled'\r\n    },\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [TREESELECT_VALUE_ACCESSOR],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TreeSelect implements AfterContentInit {\r\n    @Input() type: string = 'button';\r\n\r\n    @Input() inputId: string;\r\n\r\n    @Input() scrollHeight: string = '400px';\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() metaKeySelection: boolean = true;\r\n\r\n    @Input() display: string = 'comma';\r\n\r\n    @Input() selectionMode: string = 'single';\r\n\r\n    @Input() tabindex: string;\r\n\r\n    @Input() ariaLabelledBy: string;\r\n\r\n    @Input() placeholder: string;\r\n\r\n    @Input() panelClass: string;\r\n\r\n    @Input() panelStyle: any;\r\n\r\n    @Input() panelStyleClass: string;\r\n\r\n    @Input() containerStyle: object;\r\n\r\n    @Input() containerStyleClass: string;\r\n\r\n    @Input() labelStyle: object;\r\n\r\n    @Input() labelStyleClass: string;\r\n\r\n    @Input() overlayOptions: OverlayOptions;\r\n\r\n    @Input() emptyMessage: string = '';\r\n\r\n    @Input() appendTo: any;\r\n\r\n    @Input() filter: boolean = false;\r\n\r\n    @Input() filterBy: string = 'label';\r\n\r\n    @Input() filterMode: string = 'lenient';\r\n\r\n    @Input() filterPlaceholder: string;\r\n\r\n    @Input() filterLocale: string;\r\n\r\n    @Input() filterInputAutoFocus: boolean = true;\r\n\r\n    @Input() propagateSelectionDown: boolean = true;\r\n\r\n    @Input() propagateSelectionUp: boolean = true;\r\n\r\n    @Input() showClear: boolean = false;\r\n\r\n    @Input() resetFilterOnHide: boolean = true;\r\n\r\n    @Input() get options(): any[] {\r\n        return this._options;\r\n    }\r\n    set options(options) {\r\n        this._options = options;\r\n        this.updateTreeState();\r\n    }\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n\r\n    @ViewChild('container') containerEl: ElementRef;\r\n\r\n    @ViewChild('focusInput') focusInput: ElementRef;\r\n\r\n    @ViewChild('filter') filterViewChild: ElementRef;\r\n\r\n    @ViewChild('tree') treeViewChild: Tree;\r\n\r\n    @ViewChild('panel') panelEl: ElementRef;\r\n\r\n    @ViewChild('overlay') overlayViewChild: Overlay;\r\n\r\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onShow: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onHide: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onClear: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\r\n\r\n    /* @deprecated */\r\n    _showTransitionOptions: string;\r\n    @Input() get showTransitionOptions(): string {\r\n        return this._showTransitionOptions;\r\n    }\r\n    set showTransitionOptions(val: string) {\r\n        this._showTransitionOptions = val;\r\n        console.warn('The showTransitionOptions property is deprecated since v14.2.0, use overlayOptions property instead.');\r\n    }\r\n\r\n    /* @deprecated */\r\n    _hideTransitionOptions: string;\r\n    @Input() get hideTransitionOptions(): string {\r\n        return this._hideTransitionOptions;\r\n    }\r\n    set hideTransitionOptions(val: string) {\r\n        this._hideTransitionOptions = val;\r\n        console.warn('The hideTransitionOptions property is deprecated since v14.2.0, use overlayOptions property instead.');\r\n    }\r\n\r\n    public filteredNodes: TreeNode[];\r\n\r\n    filterValue: string = null;\r\n\r\n    serializedValue: any[];\r\n\r\n    valueTemplate: TemplateRef<any>;\r\n\r\n    headerTemplate: TemplateRef<any>;\r\n\r\n    emptyTemplate: TemplateRef<any>;\r\n\r\n    footerTemplate: TemplateRef<any>;\r\n\r\n    clearIconTemplate: TemplateRef<any>;\r\n\r\n    triggerIconTemplate: TemplateRef<any>;\r\n\r\n    filterIconTemplate: TemplateRef<any>;\r\n\r\n    closeIconTemplate: TemplateRef<any>;\r\n\r\n    itemTogglerIconTemplate: TemplateRef<any>;\r\n\r\n    itemCheckboxIconTemplate: TemplateRef<any>;\r\n\r\n    itemLoadingIconTemplate: TemplateRef<any>;\r\n\r\n    focused: boolean;\r\n\r\n    overlayVisible: boolean;\r\n\r\n    selfChange: boolean;\r\n\r\n    value;\r\n\r\n    expandedNodes: any[] = [];\r\n\r\n    _options: any[];\r\n\r\n    public templateMap: any;\r\n\r\n    onModelChange: Function = () => {};\r\n\r\n    onModelTouched: Function = () => {};\r\n\r\n    constructor(public config: PrimeNGConfig, public cd: ChangeDetectorRef, public el: ElementRef, public overlayService: OverlayService) {}\r\n\r\n    ngOnInit() {\r\n        this.updateTreeState();\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        if (this.templates.length) {\r\n            this.templateMap = {};\r\n        }\r\n\r\n        this.templates.forEach((item) => {\r\n            switch (item.getType()) {\r\n                case 'value':\r\n                    this.valueTemplate = item.template;\r\n                    break;\r\n\r\n                case 'header':\r\n                    this.headerTemplate = item.template;\r\n                    break;\r\n\r\n                case 'empty':\r\n                    this.emptyTemplate = item.template;\r\n                    break;\r\n\r\n                case 'footer':\r\n                    this.footerTemplate = item.template;\r\n                    break;\r\n\r\n                case 'clearicon':\r\n                    this.clearIconTemplate = item.template;\r\n                    break;\r\n\r\n                case 'triggericon':\r\n                    this.triggerIconTemplate = item.template;\r\n                    break;\r\n\r\n                case 'filtericon':\r\n                    this.filterIconTemplate = item.template;\r\n                    break;\r\n\r\n                case 'closeicon':\r\n                    this.closeIconTemplate = item.template;\r\n                    break;\r\n\r\n                case 'itemtogglericon':\r\n                    this.itemTogglerIconTemplate = item.template;\r\n                    break;\r\n\r\n                case 'itemcheckboxicon':\r\n                    this.itemCheckboxIconTemplate = item.template;\r\n                    break;\r\n\r\n                case 'itemloadingicon':\r\n                    this.itemLoadingIconTemplate = item.template;\r\n                    break;\r\n\r\n                default: //TODO: @deprecated Used \"value\" template instead\r\n                    if (item.name) this.templateMap[item.name] = item.template;\r\n                    else this.valueTemplate = item.template;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    onOverlayAnimationStart(event: AnimationEvent) {\r\n        switch (event.toState) {\r\n            case 'visible':\r\n                if (this.filter) {\r\n                    ObjectUtils.isNotEmpty(this.filterValue) && this.treeViewChild?._filter(this.filterValue);\r\n                    this.filterInputAutoFocus && this.filterViewChild.nativeElement.focus();\r\n                }\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    onSelectionChange(event) {\r\n        this.value = event;\r\n        this.onModelChange(this.value);\r\n        this.cd.markForCheck();\r\n    }\r\n\r\n    onClick(event) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (!this.overlayViewChild?.el?.nativeElement?.contains(event.target) && !DomHandler.hasClass(event.target, 'p-treeselect-close')) {\r\n            if (this.overlayVisible) {\r\n                this.hide();\r\n            } else {\r\n                this.show();\r\n            }\r\n\r\n            this.focusInput.nativeElement.focus();\r\n        }\r\n    }\r\n\r\n    onKeyDown(event) {\r\n        switch (event.which) {\r\n            //down\r\n            case 40:\r\n                if (!this.overlayVisible && event.altKey) {\r\n                    this.show();\r\n                    event.preventDefault();\r\n                } else if (this.overlayVisible && this.panelEl?.nativeElement) {\r\n                    let focusableElements = DomHandler.getFocusableElements(this.panelEl.nativeElement);\r\n\r\n                    if (focusableElements && focusableElements.length > 0) {\r\n                        focusableElements[0].focus();\r\n                    }\r\n\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n\r\n            //space\r\n            case 32:\r\n                if (!this.overlayVisible) {\r\n                    this.show();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n\r\n            //enter and escape\r\n            case 13:\r\n            case 27:\r\n                if (this.overlayVisible) {\r\n                    this.hide();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n\r\n            //tab\r\n            case 9:\r\n                this.hide();\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onFilterInput(event) {\r\n        this.filterValue = event.target.value;\r\n        this.treeViewChild?._filter(this.filterValue);\r\n        this.onFilter.emit({\r\n            originalEvent: event,\r\n            filteredValue: this.treeViewChild?.filteredNodes\r\n        });\r\n    }\r\n\r\n    show() {\r\n        this.overlayVisible = true;\r\n    }\r\n\r\n    hide(event?: any) {\r\n        this.overlayVisible = false;\r\n        this.resetFilter();\r\n\r\n        this.onHide.emit(event);\r\n        this.cd.markForCheck();\r\n    }\r\n\r\n    clear(event) {\r\n        this.value = null;\r\n        this.resetExpandedNodes();\r\n        this.resetPartialSelected();\r\n        this.onModelChange(this.value);\r\n        this.onClear.emit();\r\n\r\n        event.stopPropagation();\r\n    }\r\n\r\n    checkValue() {\r\n        return this.value !== null && ObjectUtils.isNotEmpty(this.value);\r\n    }\r\n\r\n    resetFilter() {\r\n        if (this.filter && !this.resetFilterOnHide) {\r\n            this.filteredNodes = this.treeViewChild?.filteredNodes;\r\n            this.treeViewChild?.resetFilter();\r\n        } else {\r\n            this.filterValue = null;\r\n        }\r\n    }\r\n\r\n    updateTreeState() {\r\n        if (this.value) {\r\n            let selectedNodes = this.selectionMode === 'single' ? [this.value] : [...this.value];\r\n            this.resetExpandedNodes();\r\n            this.resetPartialSelected();\r\n            if (selectedNodes && this.options) {\r\n                this.updateTreeBranchState(null, null, selectedNodes);\r\n            }\r\n        }\r\n    }\r\n\r\n    updateTreeBranchState(node, path, selectedNodes) {\r\n        if (node) {\r\n            if (this.isSelected(node)) {\r\n                this.expandPath(path);\r\n                selectedNodes.splice(selectedNodes.indexOf(node), 1);\r\n            }\r\n\r\n            if (selectedNodes.length > 0 && node.children) {\r\n                for (let childNode of node.children) {\r\n                    this.updateTreeBranchState(childNode, [...path, node], selectedNodes);\r\n                }\r\n            }\r\n        } else {\r\n            for (let childNode of this.options) {\r\n                this.updateTreeBranchState(childNode, [], selectedNodes);\r\n            }\r\n        }\r\n    }\r\n\r\n    expandPath(expandedNodes) {\r\n        for (let node of expandedNodes) {\r\n            node.expanded = true;\r\n        }\r\n\r\n        this.expandedNodes = [...expandedNodes];\r\n    }\r\n\r\n    nodeExpand(event) {\r\n        this.onNodeExpand.emit(event);\r\n        this.expandedNodes.push(event.node);\r\n    }\r\n\r\n    nodeCollapse(event) {\r\n        this.onNodeCollapse.emit(event);\r\n        this.expandedNodes.splice(this.expandedNodes.indexOf(event.node), 1);\r\n    }\r\n\r\n    resetExpandedNodes() {\r\n        for (let node of this.expandedNodes) {\r\n            node.expanded = false;\r\n        }\r\n\r\n        this.expandedNodes = [];\r\n    }\r\n\r\n    resetPartialSelected(nodes = this.options): void {\r\n        if (!nodes) {\r\n            return;\r\n        }\r\n\r\n        for (let node of nodes) {\r\n            node.partialSelected = false;\r\n\r\n            if (node.children && node.children?.length > 0) {\r\n                this.resetPartialSelected(node.children);\r\n            }\r\n        }\r\n    }\r\n\r\n    findSelectedNodes(node, keys, selectedNodes) {\r\n        if (node) {\r\n            if (this.isSelected(node)) {\r\n                selectedNodes.push(node);\r\n                delete keys[node.key];\r\n            }\r\n\r\n            if (Object.keys(keys).length && node.children) {\r\n                for (let childNode of node.children) {\r\n                    this.findSelectedNodes(childNode, keys, selectedNodes);\r\n                }\r\n            }\r\n        } else {\r\n            for (let childNode of this.options) {\r\n                this.findSelectedNodes(childNode, keys, selectedNodes);\r\n            }\r\n        }\r\n    }\r\n\r\n    isSelected(node: TreeNode) {\r\n        return this.findIndexInSelection(node) != -1;\r\n    }\r\n\r\n    findIndexInSelection(node: TreeNode) {\r\n        let index: number = -1;\r\n\r\n        if (this.value) {\r\n            if (this.selectionMode === 'single') {\r\n                let areNodesEqual = (this.value.key && this.value.key === node.key) || this.value == node;\r\n                index = areNodesEqual ? 0 : -1;\r\n            } else {\r\n                for (let i = 0; i < this.value.length; i++) {\r\n                    let selectedNode = this.value[i];\r\n                    let areNodesEqual = (selectedNode.key && selectedNode.key === node.key) || selectedNode == node;\r\n                    if (areNodesEqual) {\r\n                        index = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    onSelect(node) {\r\n        this.onNodeSelect.emit(node);\r\n\r\n        if (this.selectionMode === 'single') {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    onUnselect(node) {\r\n        this.onNodeUnselect.emit(node);\r\n    }\r\n\r\n    onFocus() {\r\n        this.focused = true;\r\n    }\r\n\r\n    onBlur() {\r\n        this.focused = false;\r\n    }\r\n\r\n    writeValue(value: any): void {\r\n        this.value = value;\r\n        this.updateTreeState();\r\n        this.cd.markForCheck();\r\n    }\r\n\r\n    registerOnChange(fn: Function): void {\r\n        this.onModelChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n\r\n    setDisabledState(val: boolean): void {\r\n        this.disabled = val;\r\n        this.cd.markForCheck();\r\n    }\r\n\r\n    containerClass() {\r\n        return {\r\n            'p-treeselect p-component p-inputwrapper': true,\r\n            'p-treeselect-chip': this.display === 'chip',\r\n            'p-disabled': this.disabled,\r\n            'p-focus': this.focused\r\n        };\r\n    }\r\n\r\n    labelClass() {\r\n        return {\r\n            'p-treeselect-label': true,\r\n            'p-placeholder': this.label === this.placeholder,\r\n            'p-treeselect-label-empty': !this.placeholder && this.emptyValue\r\n        };\r\n    }\r\n\r\n    get emptyValue() {\r\n        return !this.value || Object.keys(this.value).length === 0;\r\n    }\r\n\r\n    get emptyOptions() {\r\n        return !this.options || this.options.length === 0;\r\n    }\r\n\r\n    get label() {\r\n        let value = this.value || [];\r\n        return value.length ? value.map((node) => node.label).join(', ') : this.selectionMode === 'single' && this.value ? value.label : this.placeholder;\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule, OverlayModule, RippleModule, SharedModule, TreeModule, SearchIcon, TimesIcon, ChevronDownIcon],\r\n    exports: [TreeSelect, OverlayModule, SharedModule, TreeModule],\r\n    declarations: [TreeSelect]\r\n})\r\nexport class TreeSelectModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}